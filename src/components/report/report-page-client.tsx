'use client';

import { useEffect, useState } from 'react';
import { useAnalysis } from '@/contexts/AnalysisContext';
import { Header } from '@/components/layout/header';
import { ArchitectureCard } from '@/components/report/architecture-card';
import { MalwareScanCard } from '@/components/report/malware-scan-card';
import { SummaryCard } from '@/components/report/summary-card';
import { TrustCard } from '@/components/report/trust-card';
import ModelDetailsCard from '@/components/report/model-details-card';
import { ReportLoadingSkeleton } from '@/components/report/loading-skeleton';
import { Button } from '@/components/ui/button';
import { Download, Loader2 } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

// PDF content generation function
function generatePDFContent(analysisResult: any): string {
  const formatDate = (timestamp: string) => new Date(timestamp).toLocaleString();
  
  return `
COGNIGUARD AI MODEL SECURITY ANALYSIS REPORT
==============================================

Generated: ${formatDate(new Date().toISOString())}
Model File: ${analysisResult.fileName}
File Size: ${(analysisResult.fileSize / (1024 * 1024)).toFixed(2)} MB
File Hash: ${analysisResult.fileHash}

OVERALL RISK ASSESSMENT
-----------------------
Risk Score: ${analysisResult.riskScore}/100
Status: ${analysisResult.riskScore < 30 ? 'LOW RISK' : analysisResult.riskScore < 70 ? 'MEDIUM RISK' : 'HIGH RISK'}

MALWARE SCAN RESULTS
--------------------
Status: ${analysisResult.malwareScan.status.toUpperCase()}
Threats Found: ${analysisResult.malwareScan.threatsFound}
Severity Level: ${analysisResult.malwareScan.severityLevel?.toUpperCase() || 'LOW'}
Scan Time: ${analysisResult.malwareScan.scanTime}

Scan Details:
${analysisResult.malwareScan.details.map((detail: string) => `- ${detail}`).join('\n')}

${analysisResult.malwareScan.recommendations && analysisResult.malwareScan.recommendations.length > 0 ? `
Recommendations:
${analysisResult.malwareScan.recommendations.map((rec: string) => `- ${rec}`).join('\n')}
` : ''}

MODEL ARCHITECTURE
------------------
Model Type: ${analysisResult.architecture.modelType}
Total Parameters: ${analysisResult.architecture.parameters.toLocaleString()}
Total Layers: ${analysisResult.architecture.layers.length}
Suspicious Components: ${analysisResult.architecture.suspicious ? 'YES' : 'NO'}

${analysisResult.architecture.securityIssues && analysisResult.architecture.securityIssues.length > 0 ? `
Security Issues:
${analysisResult.architecture.securityIssues.map((issue: string) => `- ${issue}`).join('\n')}
` : ''}

Layer Details:
${analysisResult.architecture.layers.slice(0, 20).map((layer: string) => `- ${layer}`).join('\n')}
${analysisResult.architecture.layers.length > 20 ? `... and ${analysisResult.architecture.layers.length - 20} more layers` : ''}

MODEL METADATA
--------------
Format: ${analysisResult.metadata.format}
Framework: ${analysisResult.metadata.framework}
${analysisResult.metadata.version ? `Version: ${analysisResult.metadata.version}` : ''}
Model Size: ${analysisResult.metadata.modelSize}
${analysisResult.metadata.description ? `Description: ${analysisResult.metadata.description}` : ''}

SUMMARY
-------
This security analysis was performed by Cogniguard AI Model Security Scanner.
The report provides a comprehensive assessment of potential security risks,
malware threats, and architectural vulnerabilities in the analyzed AI model.

For questions or support, please contact your security administrator.

Report ID: ${analysisResult.fileHash.substring(0, 8)}-${Date.now()}
Generated by: Cogniguard v1.0
`;
}

export default function ReportPageClient() {
  const { analysisResult, isAnalyzing } = useAnalysis();
  const [showSkeleton, setShowSkeleton] = useState(true);
  const [countdown, setCountdown] = useState(5);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  useEffect(() => {
    // Countdown timer
    const countdownInterval = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(countdownInterval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    // Show loading skeleton for 5 seconds on Audit Report page
    const timer = setTimeout(() => {
      setShowSkeleton(false);
      setCountdown(0);
    }, 5000);

    return () => {
      clearTimeout(timer);
      clearInterval(countdownInterval);
    };
  }, []);

  const isLoading = showSkeleton || isAnalyzing;

  const handleDownloadPDF = async () => {
    if (!analysisResult || isGeneratingPDF) return;
    
    setIsGeneratingPDF(true);
    
    try {
      // Create PDF content
      const pdfContent = generatePDFContent(analysisResult);
      
      // Create and download the PDF
      const element = document.createElement('a');
      const file = new Blob([pdfContent], { type: 'text/plain' });
      element.href = URL.createObjectURL(file);
      element.download = `cogniguard-report-${analysisResult.fileName}-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF report. Please try again.');
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <div className="flex flex-col flex-1 bg-gradient-to-br from-slate-50 to-blue-50/30">
      <Header />
      <main className="flex-1 w-full max-w-7xl mx-auto px-4 py-8 md:py-12">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-6 mb-10">
          <div className="space-y-2">
            <h1 className="text-4xl md:text-5xl font-bold font-headline tracking-tight text-slate-900">
              Audit Report
            </h1>
            <p className="text-slate-600 text-lg">Comprehensive AI Model Security Analysis</p>
          </div>
          <Button 
            onClick={handleDownloadPDF}
            disabled={isLoading || isGeneratingPDF || !analysisResult} 
            className="h-12 px-6 bg-primary hover:bg-primary/90 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
          >
            {isLoading ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin mr-2" />
                Generating...
              </>
            ) : isGeneratingPDF ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin mr-2" />
                Creating PDF...
              </>
            ) : (
              <>
                <Download className="w-5 h-5 mr-2" />
                Download Report
              </>
            )}
          </Button>
        </div>

        {isLoading ? (
          <div className="space-y-6">
            {(isAnalyzing || showSkeleton) && (
              <Alert className="border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50/50 shadow-sm">
                <Loader2 className="h-5 w-5 animate-spin text-primary" />
                <AlertDescription className="ml-3 text-slate-700 font-medium">
                  🔍 {isAnalyzing ? 'Analyzing model security...' : `Generating comprehensive audit report...${countdown > 0 ? ` (${countdown}s remaining)` : ''}`} Please wait.
                </AlertDescription>
              </Alert>
            )}
            <ReportLoadingSkeleton />
          </div>
        ) : !analysisResult ? (
          <Alert>
            <AlertDescription>
              No analysis data available. Please upload and analyze a model first.
            </AlertDescription>
          </Alert>
        ) : (
          <div className="space-y-8">
            <SummaryCard />
            <TrustCard />
            <ArchitectureCard />
            <MalwareScanCard />
            <ModelDetailsCard />
          </div>
        )}
      </main>
    </div>
  );
}