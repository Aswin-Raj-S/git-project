'use client';

import { useEffect, useState } from 'react';
import { useAnalysis } from '@/contexts/AnalysisContext';
import { Header } from '@/components/layout/header';
import { ArchitectureCard } from '@/components/report/architecture-card';
import { MalwareScanCard } from '@/components/report/malware-scan-card';
import { SummaryCard } from '@/components/report/summary-card';
import { TrustCard } from '@/components/report/trust-card';
import ModelDetailsCard from '@/components/report/model-details-card';
import { ReportLoadingSkeleton } from '@/components/report/loading-skeleton';
import { Button } from '@/components/ui/button';
import { Download, Loader2 } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import jsPDF from 'jspdf';

// PDF generation function using jsPDF
function generatePDF(analysisResult: any): void {
  const doc = new jsPDF();
  const formatDate = (timestamp: string) => new Date(timestamp).toLocaleString();
  
  // Set up PDF styling
  let yPosition = 20;
  const lineHeight = 7;
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  // Helper function to add text with auto-wrap
  const addText = (text: string, fontSize = 10, isBold = false) => {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    const lines = doc.splitTextToSize(text, maxWidth);
    lines.forEach((line: string) => {
      if (yPosition > 270) { // Check if we need a new page
        doc.addPage();
        yPosition = 20;
      }
      doc.text(line, margin, yPosition);
      yPosition += lineHeight;
    });
  };
  
  // Helper function to add section header
  const addSectionHeader = (title: string) => {
    yPosition += 5;
    addText(title, 14, true);
    yPosition += 3;
  };
  
  // PDF Content
  addText('COGNIGUARD AI MODEL SECURITY ANALYSIS REPORT', 18, true);
  yPosition += 5;
  
  addText(`Generated: ${formatDate(new Date().toISOString())}`, 10);
  addText(`Model File: ${analysisResult.fileName}`, 10);
  addText(`File Size: ${(analysisResult.fileSize / (1024 * 1024)).toFixed(2)} MB`, 10);
  addText(`File Hash: ${analysisResult.fileHash}`, 10);
  
  addSectionHeader('OVERALL RISK ASSESSMENT');
  addText(`Risk Score: ${analysisResult.riskScore}/100`, 10);
  addText(`Status: ${analysisResult.riskScore < 30 ? 'LOW RISK' : analysisResult.riskScore < 70 ? 'MEDIUM RISK' : 'HIGH RISK'}`, 10);
  
  addSectionHeader('MALWARE SCAN RESULTS');
  addText(`Status: ${analysisResult.malwareScan.status.toUpperCase()}`, 10);
  addText(`Threats Found: ${analysisResult.malwareScan.threatsFound}`, 10);
  addText(`Severity Level: ${analysisResult.malwareScan.severityLevel?.toUpperCase() || 'LOW'}`, 10);
  addText(`Scan Time: ${analysisResult.malwareScan.scanTime}`, 10);
  
  if (analysisResult.malwareScan.details && analysisResult.malwareScan.details.length > 0) {
    yPosition += 3;
    addText('Scan Details:', 10, true);
    analysisResult.malwareScan.details.forEach((detail: string) => {
      addText(`• ${detail}`, 9);
    });
  }
  
  if (analysisResult.malwareScan.recommendations && analysisResult.malwareScan.recommendations.length > 0) {
    yPosition += 3;
    addText('Recommendations:', 10, true);
    analysisResult.malwareScan.recommendations.forEach((rec: string) => {
      addText(`• ${rec}`, 9);
    });
  }
  
  addSectionHeader('MODEL ARCHITECTURE');
  addText(`Model Type: ${analysisResult.architecture.modelType}`, 10);
  addText(`Total Parameters: ${analysisResult.architecture.parameters.toLocaleString()}`, 10);
  addText(`Total Layers: ${analysisResult.architecture.layers.length}`, 10);
  addText(`Suspicious Components: ${analysisResult.architecture.suspicious ? 'YES' : 'NO'}`, 10);
  
  if (analysisResult.architecture.securityIssues && analysisResult.architecture.securityIssues.length > 0) {
    yPosition += 3;
    addText('Security Issues:', 10, true);
    analysisResult.architecture.securityIssues.forEach((issue: string) => {
      addText(`• ${issue}`, 9);
    });
  }
  
  addSectionHeader('MODEL METADATA');
  addText(`Format: ${analysisResult.metadata.format}`, 10);
  addText(`Framework: ${analysisResult.metadata.framework}`, 10);
  if (analysisResult.metadata.version) {
    addText(`Version: ${analysisResult.metadata.version}`, 10);
  }
  addText(`Model Size: ${analysisResult.metadata.modelSize}`, 10);
  
  addSectionHeader('SUMMARY');
  addText('This security analysis was performed by Cogniguard AI Model Security Scanner. The report provides a comprehensive assessment of potential security risks, malware threats, and architectural vulnerabilities in the analyzed AI model.', 10);
  yPosition += 5;
  addText(`Report ID: ${analysisResult.fileHash.substring(0, 8)}-${Date.now()}`, 9);
  addText('Generated by: Cogniguard v1.0', 9);
  
  // Save the PDF
  const fileName = `cogniguard-report-${analysisResult.fileName}-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}

export default function ReportPageClient() {
  const { analysisResult, isAnalyzing } = useAnalysis();
  const [showSkeleton, setShowSkeleton] = useState(true);
  const [countdown, setCountdown] = useState(5);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  useEffect(() => {
    // Countdown timer
    const countdownInterval = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(countdownInterval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    // Show loading skeleton for 5 seconds on Audit Report page
    const timer = setTimeout(() => {
      setShowSkeleton(false);
      setCountdown(0);
    }, 5000);

    return () => {
      clearTimeout(timer);
      clearInterval(countdownInterval);
    };
  }, []);

  const isLoading = showSkeleton || isAnalyzing;

  const handleDownloadPDF = async () => {
    if (!analysisResult || isGeneratingPDF) return;
    
    setIsGeneratingPDF(true);
    
    try {
      // Generate and download PDF
      generatePDF(analysisResult);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF report. Please try again.');
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <div className="flex flex-col flex-1 bg-gradient-to-br from-slate-50 to-blue-50/30">
      <Header />
      <main className="flex-1 w-full max-w-7xl mx-auto px-4 py-8 md:py-12">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-6 mb-10">
          <div className="space-y-2">
            <h1 className="text-4xl md:text-5xl font-bold font-headline tracking-tight text-slate-900">
              Audit Report
            </h1>
            <p className="text-slate-600 text-lg">Comprehensive AI Model Security Analysis</p>
          </div>
          <Button 
            onClick={handleDownloadPDF}
            disabled={isLoading || isGeneratingPDF || !analysisResult} 
            className="h-12 px-6 bg-primary hover:bg-primary/90 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
          >
            {isLoading ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin mr-2" />
                Generating...
              </>
            ) : isGeneratingPDF ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin mr-2" />
                Creating PDF...
              </>
            ) : (
              <>
                <Download className="w-5 h-5 mr-2" />
                Download Report
              </>
            )}
          </Button>
        </div>

        {isLoading ? (
          <div className="space-y-6">
            {(isAnalyzing || showSkeleton) && (
              <Alert className="border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50/50 shadow-sm">
                <Loader2 className="h-5 w-5 animate-spin text-primary" />
                <AlertDescription className="ml-3 text-slate-700 font-medium">
                  🔍 {isAnalyzing ? 'Analyzing model security...' : `Generating comprehensive audit report...${countdown > 0 ? ` (${countdown}s remaining)` : ''}`} Please wait.
                </AlertDescription>
              </Alert>
            )}
            <ReportLoadingSkeleton />
          </div>
        ) : !analysisResult ? (
          <Alert>
            <AlertDescription>
              No analysis data available. Please upload and analyze a model first.
            </AlertDescription>
          </Alert>
        ) : (
          <div className="space-y-8">
            <SummaryCard />
            <TrustCard />
            <ArchitectureCard />
            <MalwareScanCard />
            <ModelDetailsCard />
          </div>
        )}
      </main>
    </div>
  );
}