'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ShieldCheck, ShieldX, ScanLine, AlertTriangle } from 'lucide-react';
import { Table, TableBody, TableCell, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { useAnalysis } from '@/contexts/AnalysisContext';
import { Alert, AlertDescription } from '@/components/ui/alert';

// Function to provide detailed explanations for security threats
const getThreatExplanation = (threat: string): string | null => {
  const lowerThreat = threat.toLowerCase();
  
  if (lowerThreat.includes('eval') || lowerThreat.includes('exec')) {
    return "These functions can execute arbitrary code and are commonly used in code injection attacks.";
  }
  if (lowerThreat.includes('subprocess') || lowerThreat.includes('system')) {
    return "System command execution capabilities that could be used to compromise the host system.";
  }
  if (lowerThreat.includes('pickle') || lowerThreat.includes('torch.load')) {
    return "Pickle deserialization can execute arbitrary Python code during model loading.";
  }
  if (lowerThreat.includes('executable')) {
    return "Embedded executables could contain malicious payloads or backdoors.";
  }
  if (lowerThreat.includes('entropy') || lowerThreat.includes('obfuscation')) {
    return "High entropy suggests encrypted or obfuscated content that may hide malicious code.";
  }
  if (lowerThreat.includes('url') || lowerThreat.includes('domain')) {
    return "Embedded URLs could be used for data exfiltration or command & control communication.";
  }
  if (lowerThreat.includes('large file') || lowerThreat.includes('resource exhaustion')) {
    return "Unusually large files may cause denial-of-service through resource exhaustion.";
  }
  if (lowerThreat.includes('small file') || lowerThreat.includes('decoy')) {
    return "Suspiciously small files may be incomplete models or decoys hiding real threats.";
  }
  return null;
};

export function MalwareScanCard() {
  const { analysisResult } = useAnalysis();
  
  if (!analysisResult) {
    return (
      <Card>
        <CardHeader>
          <div className="flex flex-row items-center gap-3">
            <ScanLine className="w-6 h-6 text-primary" />
            <CardTitle>File Integrity & Malware Scan</CardTitle>
          </div>
          <CardDescription>Scans for viruses, trojans, and other malware.</CardDescription>
        </CardHeader>
        <CardContent>
          <Alert>
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              No file analysis data available. Please upload and analyze a model first.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  const { malwareScan } = analysisResult;
  const isClean = malwareScan.status === 'clean';
  const isInfected = malwareScan.status === 'infected';

  return (
    <Card>
      <CardHeader>
        <div className="flex flex-row items-center gap-3">
          <ScanLine className="w-6 h-6 text-primary" />
          <CardTitle>File Integrity & Malware Scan</CardTitle>
        </div>
        <CardDescription>Scans for viruses, trojans, and other malware.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className={`flex items-center gap-4 p-4 rounded-lg ${isClean ? 'bg-green-500/10 text-green-500' : isInfected ? 'bg-red-500/10 text-red-500' : 'bg-yellow-500/10 text-yellow-500'}`}>
          {isClean ? <ShieldCheck className="w-8 h-8" /> : <ShieldX className="w-8 h-8" />}
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-1">
              <h3 className="font-semibold text-lg">
                {isClean ? 'No Threats Detected' : isInfected ? 'Threats Found' : 'Suspicious Content'}
              </h3>
              <Badge variant={malwareScan.severityLevel === 'critical' ? 'destructive' : malwareScan.severityLevel === 'high' ? 'destructive' : 'secondary'}>
                {malwareScan.severityLevel?.toUpperCase() || 'LOW'}
              </Badge>
            </div>
            <p className={`text-sm ${isClean ? 'text-green-400' : isInfected ? 'text-red-400' : 'text-yellow-400'}`}>
              {isClean 
                ? 'The uploaded model file appears to be safe.' 
                : isInfected 
                  ? 'Malicious content detected in the model file.'
                  : 'Suspicious patterns found that require attention.'
              }
            </p>
          </div>
        </div>
        
        {malwareScan.details.length > 0 && (
          <Alert className={`mb-4 ${isInfected ? 'border-red-500' : 'border-yellow-500'}`}>
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <strong>Security Issues Found:</strong>
              <ul className="list-disc list-inside mt-2 space-y-1">
                {malwareScan.details.map((detail, index) => (
                  <li key={index} className="text-sm">
                    <span className="font-medium">{detail}</span>
                    {getThreatExplanation(detail) && (
                      <p className="text-xs text-muted-foreground mt-1 ml-4">
                        {getThreatExplanation(detail)}
                      </p>
                    )}
                  </li>
                ))}
              </ul>
              
              {(isInfected || malwareScan.status === 'suspicious') && (
                <div className="mt-3 p-3 bg-muted rounded-md">
                  <h4 className="font-semibold text-sm mb-2">üõ°Ô∏è Security Recommendations:</h4>
                  <ul className="text-xs space-y-1">
                    {malwareScan.recommendations ? 
                      malwareScan.recommendations.map((rec, idx) => (
                        <li key={idx}>‚Ä¢ {rec}</li>
                      )) : (
                        <>
                          {isInfected && (
                            <>
                              <li>‚Ä¢ <strong>DO NOT</strong> load this model in production</li>
                              <li>‚Ä¢ Quarantine the file and scan your system</li>
                              <li>‚Ä¢ Report to your security team immediately</li>
                            </>
                          )}
                          {malwareScan.status === 'suspicious' && (
                            <>
                              <li>‚Ä¢ Exercise extreme caution before using</li>
                              <li>‚Ä¢ Consider running in isolated environment</li>
                              <li>‚Ä¢ Verify model source and integrity</li>
                            </>
                          )}
                        </>
                      )
                    }
                  </ul>
                </div>
              )}
            </AlertDescription>
          </Alert>
        )}
        
        <Table>
          <TableBody>
            <TableRow>
              <TableCell className="font-medium">Scan Status</TableCell>
              <TableCell className="text-right">
                <span className={`font-semibold ${isClean ? 'text-green-500' : isInfected ? 'text-red-500' : 'text-yellow-500'}`}>
                  {malwareScan.status.charAt(0).toUpperCase() + malwareScan.status.slice(1)}
                </span>
              </TableCell>
            </TableRow>
            <TableRow>
              <TableCell className="font-medium">Threats Found</TableCell>
              <TableCell className="text-right font-code text-muted-foreground">{malwareScan.threatsFound}</TableCell>
            </TableRow>
             <TableRow>
              <TableCell className="font-medium">Last Scanned</TableCell>
              <TableCell className="text-right font-code text-muted-foreground">{malwareScan.scanTime}</TableCell>
            </TableRow>
            <TableRow>
              <TableCell className="font-medium">File Hash</TableCell>
              <TableCell className="text-right font-code text-muted-foreground text-xs">{analysisResult.fileHash.substring(0, 16)}...</TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
